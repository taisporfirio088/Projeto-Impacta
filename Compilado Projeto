{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPlehptrFPQy55SO10xWRR/",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/taisporfirio088/Projeto-Impacta/blob/main/projeto_1.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install pandas faker\n",
        "import pandas as pd\n",
        "import random\n",
        "from faker import Faker\n",
        "import datetime\n",
        "\n",
        "# Inicializar Faker\n",
        "fake = Faker('pt_BR')\n",
        "\n",
        "# --- Dados do Colaborador ---\n",
        "num_colaboradores = 400\n",
        "generos = ['Masculino', 'Feminino']\n",
        "nacionalidades = ['Brasileira', 'Argentina', 'Colombiana', 'Americana', 'Portuguesa']\n",
        "estados_civis = ['Solteiro(a)', 'Casado(a)', 'Divorciado(a)', 'Viúvo(a)']\n",
        "cargos = ['Desenvolvedor', 'Analista de Sistemas', 'Gerente de Projetos', 'DevOps', 'Cientista de Dados', 'Administrador', 'Engenheiro de Software', 'Arquiteto de Software', 'Analista de Dados', 'DBA']\n",
        "departamentos = ['Desenvolvimento', 'TI', 'Gerenciamento de Projetos', 'Recursos Humanos', 'Suporte', 'Vendas', 'Marketing']\n",
        "modelos_trabalho = ['Remoto', 'Híbrido']\n",
        "niveis_experiencia = ['Júnior', 'Pleno', 'Sênior', 'Especialista']\n",
        "cidades = ['São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Brasília', 'Porto Alegre', 'Salvador', 'Fortaleza', 'Curitiba', 'Manaus', 'Recife']\n",
        "estados = ['SP', 'RJ', 'MG', 'DF', 'RS', 'BA', 'CE', 'PR', 'AM', 'PE']\n",
        "\n",
        "# Função para determinar a faixa etária\n",
        "def get_faixa_etaria(idade):\n",
        "    if 21 <= idade <= 24:\n",
        "        return \"21 - 24\"\n",
        "    elif 25 <= idade <= 30:\n",
        "        return \"25 - 30\"\n",
        "    elif 31 <= idade <= 35:\n",
        "        return \"31 - 35\"\n",
        "    elif 36 <= idade <= 40:\n",
        "        return \"36 - 40\"\n",
        "    elif 41 <= idade <= 45:\n",
        "        return \"41 - 45\"\n",
        "    elif 46 <= idade <= 50:\n",
        "        return \"46 - 50\"\n",
        "    elif idade >= 51:\n",
        "        return \"51+\"\n",
        "    else:\n",
        "        return \"Erro\"\n",
        "\n",
        "\n",
        "dados_colaboradores = []\n",
        "for i in range(num_colaboradores):\n",
        "    genero = random.choice(generos)\n",
        "    nome = fake.name()\n",
        "    idade = random.randint(21, 60)\n",
        "    nacionalidade = random.choice(nacionalidades)\n",
        "    estado_civil = random.choice(estados_civis)\n",
        "    cargo = random.choice(cargos)\n",
        "    departamento = random.choice(departamentos)\n",
        "    data_admissao = fake.date_between(start_date='-5y', end_date='today')\n",
        "    tempo_servico = (datetime.date.today() - datetime.date.fromisoformat(str(data_admissao))).days // 365\n",
        "    tipo_contrato = 'CLT'\n",
        "    data_nascimento = fake.date_between(start_date='-60y', end_date='-21y')\n",
        "    desempenho = round(random.uniform(5.0, 10.0), 1)\n",
        "    cidade = random.choice(cidades)\n",
        "    estado = random.choice(estados)\n",
        "    modelo_trabalho = random.choice(modelos_trabalho)\n",
        "    engajamento = round(random.uniform(3.0, 5.0), 1)\n",
        "    qtd_filhos = random.randint(0, 3)\n",
        "    nivel_experiencia = random.choice(niveis_experiencia)\n",
        "    salario = random.randint(2500, 12000)\n",
        "    faixa_etaria = get_faixa_etaria(idade)\n",
        "    dados_colaboradores.append([i+1, nome, genero, idade, faixa_etaria, nacionalidade, estado_civil, cargo, departamento, data_admissao, tempo_servico, tipo_contrato, data_nascimento, desempenho, cidade, estado, modelo_trabalho, engajamento, qtd_filhos, nivel_experiencia, salario])\n",
        "\n",
        "\n",
        "df_colaboradores = pd.DataFrame(dados_colaboradores, columns=['ID', 'Nome', 'Gênero', 'Idade', 'Faixa Etária', 'Nacionalidade', 'Estado Civil', 'Cargo', 'Departamento', 'Data de Admissão', 'Tempo de Serviço', 'Tipo de Contrato', 'Data de Nascimento', 'Desempenho', 'Cidade', 'Estado', 'Modelo de Trabalho', 'Engajamento', 'Qtd Filhos', 'Nível de Experiência', 'Salário'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uoKjkp_o3MHx",
        "outputId": "12cdb0f5-97d0-4f6a-bbab-0545f258f61f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: pandas in /usr/local/lib/python3.11/dist-packages (2.2.2)\n",
            "Requirement already satisfied: faker in /usr/local/lib/python3.11/dist-packages (36.2.2)\n",
            "Requirement already satisfied: numpy>=1.23.2 in /usr/local/lib/python3.11/dist-packages (from pandas) (1.26.4)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.1)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.1)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas) (1.17.0)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# --- Benefícios e Treinamentos ---\n",
        "\n",
        "beneficios = {\n",
        "    'Plano de Saúde': 0,\n",
        "    'Vale Alimentação': 1200,\n",
        "    'Vale Transporte': 430,\n",
        "    'Vale Home Office': 200,\n",
        "    'Plano de Saúde Adicional (Filhos)': 0,\n",
        "    'Plano de Saúde Adicional (Pensão)': 0\n",
        "}\n",
        "\n",
        "num_treinamentos = 10\n",
        "tipos_treinamento = ['Liderança', 'Técnico', 'Comportamental']\n",
        "\n",
        "dados_treinamentos = []\n",
        "for i in range(num_treinamentos):\n",
        "    nome_treinamento = fake.sentence(nb_words=3, variable_nb_words=True, ext_word_list=None)\n",
        "    vagas = random.randint(5,20)\n",
        "    id_treinamento = i + 1\n",
        "    data_treinamento = fake.date_between(start_date='-6m', end_date='today')\n",
        "    tipo_treinamento = random.choice(tipos_treinamento)\n",
        "    duracao = random.randint(1, 5)\n",
        "    dados_treinamentos.append([nome_treinamento, vagas, id_treinamento, data_treinamento, tipo_treinamento, duracao])\n",
        "\n",
        "df_treinamentos = pd.DataFrame(dados_treinamentos, columns=['Nome do Treinamento', 'Quantidade de Vagas', 'ID do Treinamento', 'Data do Treinamento', 'Tipo de Treinamento', 'Duração (dias)'])\n"
      ],
      "metadata": {
        "id": "z226OxPp3OdP"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# --- Despesas ---\n",
        "\n",
        "despesas_categorias = ['Salários', 'Benefícios', 'Treinamentos', 'Despesas Administrativas', 'Contratações', 'Aniversários/Kits']\n",
        "despesas_valores = [sum(df_colaboradores['Salário']), 0, 0, random.randint(100000, 200000), random.randint(50000, 100000), random.randint(10000, 20000)]\n",
        "\n",
        "df_despesas = pd.DataFrame({'Categoria': despesas_categorias, 'Valor (R$)': despesas_valores})\n"
      ],
      "metadata": {
        "id": "lhqSyEQU3O_o"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# --- Admissões e Demissões ---\n",
        "meses_2024 = [str(i).zfill(2) for i in range(1, datetime.date.today().month + 1)]\n",
        "admissoes_2024 = [random.randint(5, 20) for i in meses_2024]\n",
        "demissao_2024_justa_causa = [random.randint(0, 5) for i in meses_2024]\n",
        "demissao_2024_sem_justa_causa = [random.randint(0, 3) for i in meses_2024]\n",
        "custo_contratacao = random.randint(1000, 3000) #custo por contratacao\n",
        "custo_demissao_justa_causa = random.randint(2000, 5000) #custo por demissao com justa causa\n",
        "custo_demissao_sem_justa_causa = random.randint(1000, 2000) #custo por demissao sem justa causa\n",
        "\n",
        "df_admissoes_demissao = pd.DataFrame({'Mês': meses_2024, 'Admissões': admissoes_2024, 'Demissões (Justa Causa)': demissao_2024_justa_causa, 'Demissões (Sem Justa Causa)': demissao_2024_sem_justa_causa})\n"
      ],
      "metadata": {
        "id": "pagFFb3I3OTf"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# --- Vendas de Software ---\n",
        "softwares = ['Software A', 'Software B', 'Software C', 'Software D']\n",
        "empresas = [fake.company() for i in range(100)]\n",
        "departamentos_dev = ['Desenvolvimento', 'TI'] #departamentos responsaveis pelo desenvolvimento\n",
        "dados_vendas = []\n",
        "for i in range(100):\n",
        "    software = random.choice(softwares)\n",
        "    empresa = random.choice(empresas)\n",
        "    data_assinatura = fake.date_between(start_date='-1y', end_date='today')\n",
        "    departamento_dev = random.choice(departamentos_dev)\n",
        "    dados_vendas.append([i+1, software, empresa, data_assinatura, departamento_dev])\n",
        "\n",
        "df_vendas = pd.DataFrame(dados_vendas, columns=['ID', 'Software', 'Empresa Contratante', 'Data de Assinatura', 'Departamento'])"
      ],
      "metadata": {
        "id": "-cfAOWV23jlG"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# --- Calcular alguns valores para o dashboard\n",
        "df_colaboradores['Media Engajamento geral empresa'] = df_colaboradores['Engajamento'].mean()\n",
        "df_colaboradores['Media Desempenho geral empresa'] = df_colaboradores['Desempenho'].mean()\n",
        "# calcular valores para beneficios\n",
        "df_colaboradores['Vale Alimentacao'] = beneficios['Vale Alimentação']\n",
        "df_colaboradores['Vale Transporte'] = df_colaboradores.apply(lambda x: beneficios['Vale Transporte'] if x['Modelo de Trabalho'] == 'Híbrido' else beneficios['Vale Home Office'], axis=1)\n",
        "df_colaboradores['Plano de Saúde Adicional (Filhos)'] = df_colaboradores.apply(lambda x: beneficios['Plano de Saúde Adicional (Filhos)'] if x['Qtd Filhos'] > 0 else 0, axis=1)\n",
        "\n",
        "# --- Calcular total de despesas ---\n",
        "df_despesas.loc[df_despesas['Categoria'] == 'Benefícios', 'Valor (R$)'] = df_colaboradores[['Vale Alimentacao', 'Vale Transporte', 'Plano de Saúde Adicional (Filhos)']].sum().sum()\n",
        "\n",
        "# --- Salvar os DataFrames como CSV ---\n",
        "\n",
        "df_colaboradores.to_csv('colaboradores.csv', index=False, encoding='utf-8')\n",
        "df_treinamentos.to_csv('treinamentos.csv', index=False, encoding='utf-8')\n",
        "df_despesas.to_csv('despesas.csv', index=False, encoding='utf-8')\n",
        "df_admissoes_demissao.to_csv('admissoes_demissões.csv', index=False, encoding='utf-8')\n",
        "df_vendas.to_csv('vendas.csv', index=False, encoding='utf-8')\n",
        "\n",
        "# --- Download dos arquivos ---\n",
        "from google.colab import files\n",
        "files.download('colaboradores.csv')\n",
        "files.download('treinamentos.csv')\n",
        "files.download('despesas.csv')\n",
        "files.download('admissoes_demissões.csv')\n",
        "files.download('vendas.csv')\n",
        "\n",
        "print(\"Arquivos CSV gerados e salvos com sucesso!\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "id": "Sa9C58hi3nep",
        "outputId": "275041b8-a97a-40ae-e18c-22b976cca645"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "\n",
              "    async function download(id, filename, size) {\n",
              "      if (!google.colab.kernel.accessAllowed) {\n",
              "        return;\n",
              "      }\n",
              "      const div = document.createElement('div');\n",
              "      const label = document.createElement('label');\n",
              "      label.textContent = `Downloading \"${filename}\": `;\n",
              "      div.appendChild(label);\n",
              "      const progress = document.createElement('progress');\n",
              "      progress.max = size;\n",
              "      div.appendChild(progress);\n",
              "      document.body.appendChild(div);\n",
              "\n",
              "      const buffers = [];\n",
              "      let downloaded = 0;\n",
              "\n",
              "      const channel = await google.colab.kernel.comms.open(id);\n",
              "      // Send a message to notify the kernel that we're ready.\n",
              "      channel.send({})\n",
              "\n",
              "      for await (const message of channel.messages) {\n",
              "        // Send a message to notify the kernel that we're ready.\n",
              "        channel.send({})\n",
              "        if (message.buffers) {\n",
              "          for (const buffer of message.buffers) {\n",
              "            buffers.push(buffer);\n",
              "            downloaded += buffer.byteLength;\n",
              "            progress.value = downloaded;\n",
              "          }\n",
              "        }\n",
              "      }\n",
              "      const blob = new Blob(buffers, {type: 'application/binary'});\n",
              "      const a = document.createElement('a');\n",
              "      a.href = window.URL.createObjectURL(blob);\n",
              "      a.download = filename;\n",
              "      div.appendChild(a);\n",
              "      a.click();\n",
              "      div.remove();\n",
              "    }\n",
              "  "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "download(\"download_0814ddac-7ddd-4f24-b633-035e9762acfc\", \"colaboradores.csv\", 81546)"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "\n",
              "    async function download(id, filename, size) {\n",
              "      if (!google.colab.kernel.accessAllowed) {\n",
              "        return;\n",
              "      }\n",
              "      const div = document.createElement('div');\n",
              "      const label = document.createElement('label');\n",
              "      label.textContent = `Downloading \"${filename}\": `;\n",
              "      div.appendChild(label);\n",
              "      const progress = document.createElement('progress');\n",
              "      progress.max = size;\n",
              "      div.appendChild(progress);\n",
              "      document.body.appendChild(div);\n",
              "\n",
              "      const buffers = [];\n",
              "      let downloaded = 0;\n",
              "\n",
              "      const channel = await google.colab.kernel.comms.open(id);\n",
              "      // Send a message to notify the kernel that we're ready.\n",
              "      channel.send({})\n",
              "\n",
              "      for await (const message of channel.messages) {\n",
              "        // Send a message to notify the kernel that we're ready.\n",
              "        channel.send({})\n",
              "        if (message.buffers) {\n",
              "          for (const buffer of message.buffers) {\n",
              "            buffers.push(buffer);\n",
              "            downloaded += buffer.byteLength;\n",
              "            progress.value = downloaded;\n",
              "          }\n",
              "        }\n",
              "      }\n",
              "      const blob = new Blob(buffers, {type: 'application/binary'});\n",
              "      const a = document.createElement('a');\n",
              "      a.href = window.URL.createObjectURL(blob);\n",
              "      a.download = filename;\n",
              "      div.appendChild(a);\n",
              "      a.click();\n",
              "      div.remove();\n",
              "    }\n",
              "  "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "download(\"download_bec4acf3-a40e-45c8-8264-40808858b70c\", \"treinamentos.csv\", 601)"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "\n",
              "    async function download(id, filename, size) {\n",
              "      if (!google.colab.kernel.accessAllowed) {\n",
              "        return;\n",
              "      }\n",
              "      const div = document.createElement('div');\n",
              "      const label = document.createElement('label');\n",
              "      label.textContent = `Downloading \"${filename}\": `;\n",
              "      div.appendChild(label);\n",
              "      const progress = document.createElement('progress');\n",
              "      progress.max = size;\n",
              "      div.appendChild(progress);\n",
              "      document.body.appendChild(div);\n",
              "\n",
              "      const buffers = [];\n",
              "      let downloaded = 0;\n",
              "\n",
              "      const channel = await google.colab.kernel.comms.open(id);\n",
              "      // Send a message to notify the kernel that we're ready.\n",
              "      channel.send({})\n",
              "\n",
              "      for await (const message of channel.messages) {\n",
              "        // Send a message to notify the kernel that we're ready.\n",
              "        channel.send({})\n",
              "        if (message.buffers) {\n",
              "          for (const buffer of message.buffers) {\n",
              "            buffers.push(buffer);\n",
              "            downloaded += buffer.byteLength;\n",
              "            progress.value = downloaded;\n",
              "          }\n",
              "        }\n",
              "      }\n",
              "      const blob = new Blob(buffers, {type: 'application/binary'});\n",
              "      const a = document.createElement('a');\n",
              "      a.href = window.URL.createObjectURL(blob);\n",
              "      a.download = filename;\n",
              "      div.appendChild(a);\n",
              "      a.click();\n",
              "      div.remove();\n",
              "    }\n",
              "  "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "download(\"download_e4118bfe-2df7-4b3e-a2a5-99cbf35ea043\", \"despesas.csv\", 151)"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "\n",
              "    async function download(id, filename, size) {\n",
              "      if (!google.colab.kernel.accessAllowed) {\n",
              "        return;\n",
              "      }\n",
              "      const div = document.createElement('div');\n",
              "      const label = document.createElement('label');\n",
              "      label.textContent = `Downloading \"${filename}\": `;\n",
              "      div.appendChild(label);\n",
              "      const progress = document.createElement('progress');\n",
              "      progress.max = size;\n",
              "      div.appendChild(progress);\n",
              "      document.body.appendChild(div);\n",
              "\n",
              "      const buffers = [];\n",
              "      let downloaded = 0;\n",
              "\n",
              "      const channel = await google.colab.kernel.comms.open(id);\n",
              "      // Send a message to notify the kernel that we're ready.\n",
              "      channel.send({})\n",
              "\n",
              "      for await (const message of channel.messages) {\n",
              "        // Send a message to notify the kernel that we're ready.\n",
              "        channel.send({})\n",
              "        if (message.buffers) {\n",
              "          for (const buffer of message.buffers) {\n",
              "            buffers.push(buffer);\n",
              "            downloaded += buffer.byteLength;\n",
              "            progress.value = downloaded;\n",
              "          }\n",
              "        }\n",
              "      }\n",
              "      const blob = new Blob(buffers, {type: 'application/binary'});\n",
              "      const a = document.createElement('a');\n",
              "      a.href = window.URL.createObjectURL(blob);\n",
              "      a.download = filename;\n",
              "      div.appendChild(a);\n",
              "      a.click();\n",
              "      div.remove();\n",
              "    }\n",
              "  "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "download(\"download_a01f0099-fe75-48c9-b6ef-78a398cdfea6\", \"admissoes_demiss\\u00f5es.csv\", 99)"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "\n",
              "    async function download(id, filename, size) {\n",
              "      if (!google.colab.kernel.accessAllowed) {\n",
              "        return;\n",
              "      }\n",
              "      const div = document.createElement('div');\n",
              "      const label = document.createElement('label');\n",
              "      label.textContent = `Downloading \"${filename}\": `;\n",
              "      div.appendChild(label);\n",
              "      const progress = document.createElement('progress');\n",
              "      progress.max = size;\n",
              "      div.appendChild(progress);\n",
              "      document.body.appendChild(div);\n",
              "\n",
              "      const buffers = [];\n",
              "      let downloaded = 0;\n",
              "\n",
              "      const channel = await google.colab.kernel.comms.open(id);\n",
              "      // Send a message to notify the kernel that we're ready.\n",
              "      channel.send({})\n",
              "\n",
              "      for await (const message of channel.messages) {\n",
              "        // Send a message to notify the kernel that we're ready.\n",
              "        channel.send({})\n",
              "        if (message.buffers) {\n",
              "          for (const buffer of message.buffers) {\n",
              "            buffers.push(buffer);\n",
              "            downloaded += buffer.byteLength;\n",
              "            progress.value = downloaded;\n",
              "          }\n",
              "        }\n",
              "      }\n",
              "      const blob = new Blob(buffers, {type: 'application/binary'});\n",
              "      const a = document.createElement('a');\n",
              "      a.href = window.URL.createObjectURL(blob);\n",
              "      a.download = filename;\n",
              "      div.appendChild(a);\n",
              "      a.click();\n",
              "      div.remove();\n",
              "    }\n",
              "  "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "download(\"download_0318fafb-b469-404c-bfce-3c8462c4f974\", \"vendas.csv\", 4689)"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Arquivos CSV gerados e salvos com sucesso!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import random\n",
        "from datetime import datetime, timedelta\n",
        "\n",
        "# Configurações iniciais\n",
        "random.seed(42)\n",
        "np.random.seed(42)\n",
        "\n",
        "# Parâmetros\n",
        "anos = list(range(2020, 2026))\n",
        "tipos_software = ['Software de base', 'Software de aplicativo', 'Software cliente-servidor']\n",
        "segmentos = ['Educação', 'Saúde', 'Financeiro', 'Varejo', 'Tecnologia', 'Serviços']\n",
        "paises = ['Brasil', 'México', 'Argentina', 'Colômbia', 'Chile', 'Peru']\n",
        "status_projeto = ['Em desenvolvimento', 'Entregue', 'Atrasado']\n",
        "empresa_base = 'SaaS LatAm Solutions'\n",
        "\n",
        "# Função para gerar datas\n",
        "def gerar_datas(ano):\n",
        "    assinatura = datetime(ano, random.randint(1, 12), random.randint(1, 28))\n",
        "    entrega = assinatura + timedelta(days=random.randint(30, 180))\n",
        "    return assinatura.date(), entrega.date()\n",
        "\n",
        "# Lista para armazenar os dados\n",
        "dados = []\n",
        "\n",
        "for ano in anos:\n",
        "    num_contratos = (ano - 2019) * 20  # Aumenta o número de contratos por ano\n",
        "    for _ in range(num_contratos):\n",
        "        tipo = random.choice(tipos_software)\n",
        "        segmento = random.choice(segmentos)\n",
        "        pais = random.choice(paises)\n",
        "        assinatura, entrega = gerar_datas(ano)\n",
        "\n",
        "        custo = round(np.random.normal(loc=20000 + (ano - 2020) * 3000, scale=5000), 2)\n",
        "        lucro_empresa = round(custo * np.random.uniform(1.5, 2.5), 2)\n",
        "        lucro_cliente = round(custo * np.random.uniform(2.0, 4.0), 2)\n",
        "        satisfacao = random.randint(6, 10)  # escala de 1 a 10\n",
        "        status = random.choice(status_projeto)\n",
        "\n",
        "        dados.append({\n",
        "            'nome_empresa': empresa_base,\n",
        "            'tipo_software': tipo,\n",
        "            'data_assinatura': assinatura,\n",
        "            'data_entrega': entrega,\n",
        "            'custo_desenvolvimento': custo,\n",
        "            'lucro_previsto_empresa': lucro_empresa,\n",
        "            'lucro_previsto_cliente': lucro_cliente,\n",
        "            'segmento_cliente': segmento,\n",
        "            'pais_cliente': pais,\n",
        "            'status_projeto': status,\n",
        "            'satisfacao_cliente': satisfacao\n",
        "        })\n",
        "\n",
        "# Criação do DataFrame\n",
        "df = pd.DataFrame(dados)\n",
        "\n",
        "# Salvar em CSV\n",
        "df.to_csv('dados_saas_america_latina.csv', index=False)\n",
        "\n",
        "print(\"Arquivo 'dados_saas_america_latina.csv' gerado com sucesso!\")\n",
        "df.head()\n",
        "# --- Download dos arquivos ---\n",
        "from google.colab import files\n",
        "files.download('dados_saas_america_latina.csv')\n",
        "\n",
        "\n",
        "print(\"Arquivos CSV gerados e salvos com sucesso!\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 52
        },
        "id": "5HXzNsvYQdMB",
        "outputId": "cb74820e-60af-4313-a207-f75b940ac8b5"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Arquivo 'dados_saas_america_latina.csv' gerado com sucesso!\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "\n",
              "    async function download(id, filename, size) {\n",
              "      if (!google.colab.kernel.accessAllowed) {\n",
              "        return;\n",
              "      }\n",
              "      const div = document.createElement('div');\n",
              "      const label = document.createElement('label');\n",
              "      label.textContent = `Downloading \"${filename}\": `;\n",
              "      div.appendChild(label);\n",
              "      const progress = document.createElement('progress');\n",
              "      progress.max = size;\n",
              "      div.appendChild(progress);\n",
              "      document.body.appendChild(div);\n",
              "\n",
              "      const buffers = [];\n",
              "      let downloaded = 0;\n",
              "\n",
              "      const channel = await google.colab.kernel.comms.open(id);\n",
              "      // Send a message to notify the kernel that we're ready.\n",
              "      channel.send({})\n",
              "\n",
              "      for await (const message of channel.messages) {\n",
              "        // Send a message to notify the kernel that we're ready.\n",
              "        channel.send({})\n",
              "        if (message.buffers) {\n",
              "          for (const buffer of message.buffers) {\n",
              "            buffers.push(buffer);\n",
              "            downloaded += buffer.byteLength;\n",
              "            progress.value = downloaded;\n",
              "          }\n",
              "        }\n",
              "      }\n",
              "      const blob = new Blob(buffers, {type: 'application/binary'});\n",
              "      const a = document.createElement('a');\n",
              "      a.href = window.URL.createObjectURL(blob);\n",
              "      a.download = filename;\n",
              "      div.appendChild(a);\n",
              "      a.click();\n",
              "      div.remove();\n",
              "    }\n",
              "  "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "download(\"download_eab8a95f-d4a1-4e4b-9c40-9d95b52b8f62\", \"dados_saas_america_latina.csv\", 52272)"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Arquivos CSV gerados e salvos com sucesso!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Carrega os dados do arquivo gerado anteriormente\n",
        "df = pd.read_csv(\"dados_saas_america_latina.csv\", parse_dates=[\"data_assinatura\", \"data_entrega\"])\n",
        "\n",
        "# Extrai o ano para facilitar os agrupamentos\n",
        "df[\"ano\"] = df[\"data_assinatura\"].dt.year\n",
        "\n",
        "# KPI 1: Faturamento total por ano (lucro para a empresa)\n",
        "faturamento_anual = df.groupby(\"ano\")[\"lucro_previsto_empresa\"].sum().reset_index(name=\"faturamento_total\")\n",
        "\n",
        "# KPI 2: Lucro total por ano\n",
        "lucro_anual = df.groupby(\"ano\")[\"lucro_previsto_empresa\"].sum().reset_index(name=\"lucro_total_empresa\")\n",
        "\n",
        "# KPI 3: Quantidade de contratos por ano\n",
        "contratos_ano = df.groupby(\"ano\").size().reset_index(name=\"qtd_contratos\")\n",
        "\n",
        "# KPI 4: Ticket médio por contrato (lucro / contratos)\n",
        "ticket_medio = df.groupby(\"ano\")[\"lucro_previsto_empresa\"].mean().reset_index(name=\"ticket_medio\")\n",
        "\n",
        "# KPI 5: Segmento com mais contratos\n",
        "segmento_top = df[\"segmento_cliente\"].value_counts().idxmax()\n",
        "\n",
        "# KPI 6: País com mais clientes\n",
        "pais_top = df[\"pais_cliente\"].value_counts().idxmax()\n",
        "\n",
        "# KPI 7: Tempo médio de entrega em dias\n",
        "df[\"dias_entrega\"] = (df[\"data_entrega\"] - df[\"data_assinatura\"]).dt.days\n",
        "tempo_medio_entrega = round(df[\"dias_entrega\"].mean(), 2)\n",
        "\n",
        "# KPI 8: Tipo de software mais vendido\n",
        "software_mais_vendido = df[\"tipo_software\"].value_counts().idxmax()\n",
        "\n",
        "# Consolidando todos os KPIs em um dicionário\n",
        "resumo_kpis = {\n",
        "    \"segmento_mais_contratos\": segmento_top,\n",
        "    \"pais_mais_clientes\": pais_top,\n",
        "    \"tempo_medio_entrega_dias\": tempo_medio_entrega,\n",
        "    \"software_mais_vendido\": software_mais_vendido\n",
        "}\n",
        "\n",
        "# Junta os KPIs anuais\n",
        "kpis_anuais = faturamento_anual.merge(lucro_anual, on=\"ano\")\n",
        "kpis_anuais = kpis_anuais.merge(contratos_ano, on=\"ano\")\n",
        "kpis_anuais = kpis_anuais.merge(ticket_medio, on=\"ano\")\n",
        "\n",
        "# Exporta os dados\n",
        "kpis_anuais.to_csv(\"kpis_saas_america_latina.csv\", index=False)\n",
        "\n",
        "# Mostra os KPIs gerais\n",
        "print(\"KPIs gerais:\")\n",
        "for k, v in resumo_kpis.items():\n",
        "    print(f\"{k}: {v}\")\n",
        "\n",
        "# --- Download dos arquivos ---\n",
        "from google.colab import files\n",
        "files.download('kpis_saas_america_latina.csv')"
      ],
      "metadata": {
        "id": "ocYW9GZkZi60",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 104
        },
        "outputId": "252a732c-e34a-486e-d69b-4f8846db1b01"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "KPIs gerais:\n",
            "segmento_mais_contratos: Varejo\n",
            "pais_mais_clientes: Argentina\n",
            "tempo_medio_entrega_dias: 107.59\n",
            "software_mais_vendido: Software de aplicativo\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "\n",
              "    async function download(id, filename, size) {\n",
              "      if (!google.colab.kernel.accessAllowed) {\n",
              "        return;\n",
              "      }\n",
              "      const div = document.createElement('div');\n",
              "      const label = document.createElement('label');\n",
              "      label.textContent = `Downloading \"${filename}\": `;\n",
              "      div.appendChild(label);\n",
              "      const progress = document.createElement('progress');\n",
              "      progress.max = size;\n",
              "      div.appendChild(progress);\n",
              "      document.body.appendChild(div);\n",
              "\n",
              "      const buffers = [];\n",
              "      let downloaded = 0;\n",
              "\n",
              "      const channel = await google.colab.kernel.comms.open(id);\n",
              "      // Send a message to notify the kernel that we're ready.\n",
              "      channel.send({})\n",
              "\n",
              "      for await (const message of channel.messages) {\n",
              "        // Send a message to notify the kernel that we're ready.\n",
              "        channel.send({})\n",
              "        if (message.buffers) {\n",
              "          for (const buffer of message.buffers) {\n",
              "            buffers.push(buffer);\n",
              "            downloaded += buffer.byteLength;\n",
              "            progress.value = downloaded;\n",
              "          }\n",
              "        }\n",
              "      }\n",
              "      const blob = new Blob(buffers, {type: 'application/binary'});\n",
              "      const a = document.createElement('a');\n",
              "      a.href = window.URL.createObjectURL(blob);\n",
              "      a.download = filename;\n",
              "      div.appendChild(a);\n",
              "      a.click();\n",
              "      div.remove();\n",
              "    }\n",
              "  "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "download(\"download_fa799a36-882d-4a91-9a84-cd235dc6d3af\", \"kpis_saas_america_latina.csv\", 334)"
            ]
          },
          "metadata": {}
        }
      ]
    }
  ]
}
